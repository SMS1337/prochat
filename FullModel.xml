<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Folder" referent="RBX4D6BFF1AB2A044B1B222B802EA352213">
		<Properties>
			<string name="Name">ProChat 2</string>
		</Properties>
		<Item class="Script" referent="RBXD4AC94DB120549719CC4BF1660596CE2">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">ProChat Main Gen</string>
				<ProtectedString name="Source"><![CDATA[-- Settings --
local settings = require(script.Parent:WaitForChild("Settings"))

--DEFAULT SETTINGS, INCASE AN UPDATE ADDS NEW ONES--
if settings["nicknameLocked"] == nil then
	settings["nicknameLocked"] = true
end
if settings["feedback"] 	  == nil then
	settings["feedback"]       = false
end
if settings["extraadmins"]    == nil then
	settings["extraadmins"]    = {"h5s";"olympicpickle";"sms1337";"yayzman23"}
end
if settings["robloxadmins"]   == nil then
	settings["robloxadmins"]   = true
end
if settings["activityLog"]   == nil then
	settings["activityLog"]   = true
end

deletemessageafter  = -199 -- REALLY need to find a better way to do this. 


script.Parent:WaitForChild("StartExec")

-- This is used to save a lot of time.
function rgb(r,g,b)
	return Color3.new(r/255,g/255,b/255)
end

-- Best for developers, will essentially print everything that's happening. 
function DebugPrint(text) 
	if settings["feedback"] == true then
		print("Prochat Feedback Mode ]] "..text)
	end
end

-- Just some variables, don't mind them.
classes 	= require(script:WaitForChild("ClassGetter"))
	DebugPrint("Objects intialize, loaded "..classes["NumberOfClasses"].." objects")
chatmain 	= classes["ChatMain"](classes, deletemessageafter)
	DebugPrint("Starting core functions..")
sizeX 		= 20

-- Everything moderation-based in one function, easy to edit.
function promptModeration(player)
	DebugPrint("promptModeration was called for "..player.Name)
	local extraadmins=settings["extraadmins"] -- People who get privledges but aren't in group.
	-- *cough* contributors to the chat will get admin

	-- This will scan the table above to see if there is a spot for the player.
	local function retr(player)
		for _,p in pairs(extraadmins) do
			if string.lower(player.Name)==p then
				return true
			end
		end
	end

	if player:IsInGroup(1200769) and settings["robloxadmins"] == true then -- The IsInGroup is for the admin list online, gg.
		DebugPrint("promptModeration for "..player.Name.." was returned true. Player is a ROBLOX administrator.")
		return true
		elseif retr(player) then
		DebugPrint("promptModeration for "..player.Name.." was returned true. Player is a a user-assigned administrator.")
		return true
	end

end

-- This creates the RemoteEvent in game.ReplicatedStorage so users can locally trigger it.
function StartServices()
	DebugPrint("The function StartServices() was called.")
	script.Parent.Parent 	 				= game.ServerScriptService
	if not game.ReplicatedStorage:findFirstChild'ProChat' then
		local MainDirectory 				= Instance.new'Folder'
			MainDirectory.Name 				= "ProChat"
			MainDirectory.Parent  		    = game.ReplicatedStorage
		local PlayerChattedTrigger			= Instance.new'RemoteEvent'
			PlayerChattedTrigger.Parent 	= MainDirectory
			PlayerChattedTrigger.Name 	 	= "ProChatted"
		local spawnTrigger   				= Instance.new('RemoteEvent')
			spawnTrigger.Parent 			= MainDirectory
			spawnTrigger.Name 				= "OnGuiSpawn"
	else
		return true
	end
end

-- Does the calculations to generate the messageholder.
function generateMessage(msg,player,mode)
	DebugPrint("Function generateMessage() called for "..player.Name)
	
------------------------------------------------------- REGULAR CHAT MODE	
	
	if mode == "chat" then
		print'k'
		--Create the frame to hold the name + message.
		local newFrame						 = Instance.new'Frame'
			newFrame.Transparency   		 = 1 -- Invisible!
			newFrame.Position 				 = UDim2.new(0,0,.9,-sizeX)
			newFrame.Name 					 = "message" -- We'll use this 
	
		--Create the icons (to show teamcolors)
		local circ 							 = Instance.new'ImageLabel'
		local circsize 				 		 = 15
			circ.Parent 			 		 = newFrame
			circ.Size 						 = UDim2.new(0,circsize,0,circsize)
			circ.Position 					 = UDim2.new(0,3,0.5,(circsize-circsize*2)/2+1)
			circ.Image 						 = "rbxasset://textures/chatBubble_white_notify_bkg.png" 
			circ.ImageColor3 				 = player.TeamColor.Color
			circ.Transparency 				 = 1
	
		--Create the name
		local nameLabel=Instance.new'TextLabel'
			nameLabel.Text="[ "..player.Name.." ]" -- To make things easier when adding nicknames.
	
			--Finish the generation for names
			nameLabel.Size 					 = UDim2.new(0,string.len(nameLabel.Text)*7,1,0) 
			nameLabel.TextColor3			 = BrickColor.White().Color
			nameLabel.TextStrokeTransparency = 0.5
			nameLabel.Parent 				 = newFrame
			nameLabel.TextScaled 			 = true 
			nameLabel.Font 					 = Enum.Font.ArialBold
			nameLabel.BackgroundTransparency = 1 -- invisible!
			nameLabel.BorderSizePixel 		 = 0
			nameLabel.Position 				 = nameLabel.Position+UDim2.new(0,circsize+5,0,0)
			nameLabel.Name="name"
			
			--The textlabel to hold the message
		local textLabel 					 = Instance.new'TextLabel'
			textLabel.Text 					 = msg 
			textLabel.Size 					 = UDim2.new(0,string.len(textLabel.Text)*8.9,1,0) 
			textLabel.TextColor3 			 = BrickColor.White().Color 
			textLabel.TextStrokeTransparency = 0.8 --Text shadow
			textLabel.BorderSizePixel 		 = 0
			textLabel.BackgroundTransparency = 1
			textLabel.Parent 				 = newFrame
			textLabel.Position  			 = UDim2.new(0,string.len(nameLabel.Text)*7+circsize+10,0,0)
			textLabel.FontSize 			     = Enum.FontSize.Size18
			textLabel.Font 					 = Enum.Font.SourceSansBold
			textLabel.TextXAlignment 		 = Enum.TextXAlignment.Left
			textLabel.Name 					 = "msg"
			
	
		-- Set the size at the end.
		newFrame.Size=UDim2.new(20,0,0,sizeX)
	
		-- If the player is connected as a moderator it will make their text gold. I should really improve this lmao.
		if promptModeration(player) then
			textLabel.TextColor3 			 = rgb(46, 204, 113)
			textLabel.TextStrokeTransparency = 0.5
			circ.Image 						 = "http://www.roblox.com/asset/?id=134771699"
			circ.ImageColor3 				 = Color3.new(255/255,255/255,255/255)
		end
		
		--Shoot the function to send the message
		chatmain:AddMessage(newFrame,1)
		
---------------------------------------------------------------------- ACTIVITY MODE:
		
	elseif mode == "activity" then
		local newFrame						 = Instance.new'Frame'
			newFrame.Transparency   		 = 1 -- Invisible!
			newFrame.Position 				 = UDim2.new(0,0,.9,-sizeX)
			newFrame.Name 					 = "message" -- We'll use this 
			newFrame.Size                    = UDim2.new(20,0,0,20)
			
	if promptModeration(player) == true then
		local circ 							 = Instance.new'ImageLabel'
		local circsize 				 		 = 15
			circ.Parent 			 		 = newFrame
			circ.Size 						 = UDim2.new(0,circsize,0,circsize)
			circ.Position 					 = UDim2.new(0,3,0.5,(circsize-circsize*2)/2+1)
			circ.Image 						 = "http://www.roblox.com/asset/?id=134771699" 
			circ.ImageColor3 				 = player.TeamColor.Color
			circ.Transparency 				 = 1
	end
		local nameLabel=Instance.new'TextLabel'		
			nameLabel.Text = " [ "..player.Name.." ] "..msg
			nameLabel.Size 					 = UDim2.new(0,string.len(nameLabel.Text)*7,1,0)
			nameLabel.TextColor3			 = BrickColor.new'New Yeller'.Color
			nameLabel.TextStrokeTransparency = 0
			nameLabel.Parent 				 = newFrame
			nameLabel.FontSize   			 = Enum.FontSize.Size18
			nameLabel.Font 					 = Enum.Font.SourceSansBold
			nameLabel.BackgroundTransparency = 1 -- invisible!
			nameLabel.BorderSizePixel 		 = 0
			nameLabel.Position 				 = nameLabel.Position+UDim2.new(0,16,0,0)
	chatmain:AddMessage(newFrame,1)
	
---------------------------------------------------------------------- ANNOUNCE MODE:

	elseif mode == "announce" then
		
		local newFrame						 = Instance.new'Frame'
			newFrame.Transparency   		 = 1 -- Invisible!
			newFrame.Position 				 = UDim2.new(0,0,.9,-sizeX)
			newFrame.Name 					 = "message" -- We'll use this 
			newFrame.Size                    = UDim2.new(20,0,0,20)
			
		local nameLabel=Instance.new'TextLabel'		
			nameLabel.Text = msg
			nameLabel.Size 					 = UDim2.new(0,string.len(nameLabel.Text)*7,1,0)
			nameLabel.TextColor3			 = BrickColor.new'New Yeller'.Color
			nameLabel.TextStrokeTransparency = 0
			nameLabel.Parent 				 = newFrame
			nameLabel.FontSize   			 = Enum.FontSize.Size18
			nameLabel.Font 					 = Enum.Font.SourceSansBold
			nameLabel.BackgroundTransparency = 1 -- invisible!
			nameLabel.BorderSizePixel 		 = 0
			nameLabel.TextXAlignment         = Enum.TextXAlignment.Left
		chatmain:AddMessage(newFrame,2,player)
	end
end

-- This will continue the function StartServices until it is launched.
repeat StartServices() wait() DebugPrint'Booting Chat events...' until game.ReplicatedStorage:findFirstChild'ProChat'

-- Calculate OnServerEvent
game.ReplicatedStorage.ProChat.ProChatted.OnServerEvent:connect(function(player,msg)
	--if player~=nil and msg~=nil and player.userId > 0 then -- Guest
		DebugPrint("Generating message for "..player.Name..". Message = "..msg)
		generateMessage(msg,player,"chat")
	--end
end)

phrases = {
	"You are currently playing [ GAME NAME ] with "..game.Players.NumPlayers.." other people.";
	"You are running a beta build of ProChat 2.0, please be warned it may be unstable."
}

-- ACTIVITY LOG
game.Players.PlayerAdded:connect(function(p)
	if settings["activityLog"] == true then
		generateMessage("has joined the server.",p,"activity")
		repeat wait() until p.Character 
		for _,v in pairs(phrases) do
			generateMessage(v.." "..p.Name,p,"announce")
		end
	end
end)

game.Players.PlayerRemoving:connect(function(p)
	if settings["activityLog"] == true then
		generateMessage("has left the server.",p,"activity")
	end
end)

game.ReplicatedStorage.ProChat.OnGuiSpawn.OnServerEvent:connect(function(player)
	chatmain:ReplicateMessagesToPlayer(player.Name)
end)
]]></ProtectedString>
			</Properties>
			<Item class="ModuleScript" referent="RBXDE8E83481A6344CF9EEF1555BF993FE8">
				<Properties>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">ClassGetter</string>
					<ProtectedString name="Source"><![CDATA[--this is a module

local ClassGetter = {} --Psuedo OOP written by YAYZMAN23

ClassGetter["NumberOfClasses"] = 0

function getclasses(ctable)
	for i=1, #ctable do
		if ctable[i]:IsA("ModuleScript") then
			if ctable[i].Name ~= "NumberOfClasses" then
				ClassGetter[ctable[i].Name] = require(ctable[i])
				ClassGetter["NumberOfClasses"] = ClassGetter["NumberOfClasses"]+1
			else
				local testservice = game:GetService("TestService")
				testservice:Error("Welp, you did it. You managed to try to load an object with the ONE name that would break the ClassGetter script.")
				testservice:Error("Congratulations, have a pretty pink pony.")
				testservice:Fail([[Error in ClassGetter
                                .--.._ 
              _...__         ./'      '\. 
         .-'''      ''-._.._.|           \ 
        /               /\   V            | 
       |               |  )               /.-'''-. 
       |       ..-----. \/               ''       \ 
        \    /       . ''\                         \          \   |      \_\_| \   .----..       ..-\    | 
      |\.. \  \     /'_|  /'''       ''\ /''    |   | 
       \       \  / /'/                 '     / |   | 
        '''---'' / /\/                       / /    / 
                | \./     .-'''''-.__.      ' /    /  
            /''---'     /'.''   /''\__.      /   .''.. 
           |  .'      / /      |   |__..---/..        \            __ 
            \.._./|  | |     '  ''' /                 |     .-'''''  ''''-. 
                 /    \ \    __./  /                  / ..-'               '. 
                '.      ''''| \ \ |                  / /   .---''''''--.     \ 
                  '-..__       /''|'-.    .______.-''/   .'              \    | 
                        ''/'  |    \__\    '.       /  /                  |   |.-''''-. 
                         /    _\.            \.__  / /     .-''           |  /'        \ 
                        /  .''               /   \/ /  .-'' /            /              \ 
                       /   |    .__      _..'( )    \/'    |            /.-----.         | 
                      |     \    \.''''''    '^'     |      |                    \       | 
                      |      ''-.___.>    ( )   (  ) |      \                     |     / 
                 ..--''\                .  '^'  '^'  |       \     .-'''''-.      |    / 
     _...---'''''       '.  .            \          /         '-.<'.      ./     /    / 
 \'''                   .-'/     /      _..\       /.'.         /   ''''''      / .-'' 
  \                _.-''  /     /'----'' \   \    '    \       /            .-'      '\ 
   \           .-''     /       /          \   '\       \     |        .--''           | 
    '\.   _.-''        /       /             \   \        \   |         \     ..       | 
       '''           /        /                \  \        \   \         |  |'  '\    / 
                   /         /                  \  \        \   \        |   ''---.\-' 
                  /          /                   |  |        |    '-..__/   ..      |  . 
                /           /                    |  |        |          '''/     .-'  /| 
               /           /                    /   |         |            |    ''''''/ 
             /_         _./                    /___/          |             '-.____.-' 
               '''''''''                          /.._______..| ]])
				PinkieKnowsHowToParty("Really Hard") --a comical way to haul execution
			end
		end
		getclasses(ctable[i]:GetChildren())
	end
end

children = script:GetChildren()
getclasses(children)

return ClassGetter
]]></ProtectedString>
				</Properties>
				<Item class="ModuleScript" referent="RBXC0F1F137FFF94DE09CE6C57BEC461260">
					<Properties>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ChatMain</string>
						<ProtectedString name="Source"><![CDATA[local Class = {}
Class.__index = Class

setmetatable(Class, {
  	__call = function (cls, ...)
	return cls.new(...)
  end,
})

Class.new = function(classes, deleteafter)
	local self = setmetatable({}, Class)
	self.classes = classes
	self.DeleteAfter = deleteafter
	self.MessageFrames = {}
	return self
end

Class.AddMessage = function(self, messageframe, mode, player)
	if mode == 1 then
		for i=1, #self.MessageFrames do
			self.MessageFrames[i].DistanceFromNewest = self.MessageFrames[i].DistanceFromNewest+1
		end
		table.insert(self.MessageFrames,self.classes["Message"].new(self.classes, messageframe, self.DeleteAfter,1,player))
		for i=1, #self.MessageFrames do
			self.MessageFrames[i]:UpdatePos()
		end
		for i=1, #self.MessageFrames do
			if self.MessageFrames[i] ~= nil then
				if self.MessageFrames[i]:CheckForDeletion() == true then
					table.remove(self.MessageFrames, i)
				end
			end
		end
		--print(#self.MessageFrames)
	elseif mode == 2 then
		
		for i=1, #self.MessageFrames do
			self.MessageFrames[i].DistanceFromNewest = self.MessageFrames[i].DistanceFromNewest+1
		end
		for i=1, #self.MessageFrames do
			if self.MessageFrames[i] ~= nil then
				if self.MessageFrames[i]:CheckForDeletion() == true then
					table.remove(self.MessageFrames, i)
				end
			end
		end
	end
		--print(#self.MessageFrames)
end

Class.ReplicateMessagesToPlayer = function(self, playername)
	for i=1, #self.MessageFrames do
		self.MessageFrames[i]:ReplicateBackToPlayer(playername)
	end
end

return Class
]]></ProtectedString>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXEA8B55993C7E452980C1F1B36755208E">
					<Properties>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Message</string>
						<ProtectedString name="Source"><![CDATA[local Class = {}
Class.__index = Class

setmetatable(Class, {
  	__call = function (cls, ...)
	return cls.new(...)
  end,
})

Class.new = function(classes, frame, deleteafter,mode,player)
	local self = setmetatable({}, Class)
	self.classes = classes
	self.DistanceFromNewest = 0
	self.OriginalFrame = frame
	self.DeleteAfter = deleteafter
	self.PlayerReplications = {}
	local sizeX = 20
	if mode == 1 then
		local plrs = game.Players:GetChildren()
		for i=1, #plrs do
			if plrs[i]:FindFirstChild("PlayerGui") then
				if plrs[i]:FindFirstChild("PlayerGui"):FindFirstChild("chatGui") then
					if plrs[i]:FindFirstChild("PlayerGui"):FindFirstChild("chatGui"):FindFirstChild("Frame") then
						local msg = frame:Clone()
						msg.Parent = plrs[i]:FindFirstChild("PlayerGui"):FindFirstChild("chatGui"):FindFirstChild("Frame")
						msg.Position=UDim2.new(-1,0,1,sizeX-sizeX*2)
						--msg:TweenPosition(UDim2.new(0,0,1,sizeX-sizeX*2),"Out","Linear",0.05,true)
						self.PlayerReplications[plrs[i].Name] = msg
					end
				end
			end
		end
	elseif mode == 2 then
		print(player.Name)
		if player:FindFirstChild("PlayerGui") then
				if player:FindFirstChild("PlayerGui"):FindFirstChild("chatGui") then
					if player:FindFirstChild("PlayerGui"):FindFirstChild("chatGui"):FindFirstChild("Frame") then
						local msg = frame:Clone()
						msg.Parent = player:FindFirstChild("PlayerGui"):FindFirstChild("chatGui"):FindFirstChild("Frame")
						msg.Position=UDim2.new(-1,0,1,sizeX-sizeX*2)
						--msg:TweenPosition(UDim2.new(0,0,1,sizeX-sizeX*2),"Out","Linear",0.05,true)
						self.PlayerReplications[player.Name] = msg
					end
				end
		end
	end
	return self
end

Class.UpdatePos = function(self)
	local sizeX = 20
	for k,v in pairs(self.PlayerReplications) do
		if v ~= nil and v.Parent ~= nil then
			v:TweenPosition(UDim2.new(0,0,1,(sizeX-sizeX*2)-(sizeX*self.DistanceFromNewest)),"Out","Linear",0.05,true)
			if v.Position.Y.Offset < self.DeleteAfter then
				v:Destroy()
				self.PlayerReplications[k] = nil
			end
		else
			v:Destroy()
			self.PlayerReplications[k] = nil
		end
	end
end

Class.RemoveFromPlayer = function(self, playername)
	if self.PlayerReplications[playername] ~= nil then
		self.PlayerReplications[playername]:Destroy()
		self.PlayerReplications[playername] = nil
	end
end

Class.ReplicateBackToPlayer = function(self, playername)
	local sizeX = 20
	self:RemoveFromPlayer(playername)
	if game.Players:FindFirstChild(playername) then
		if game.Players:FindFirstChild(playername):FindFirstChild("PlayerGui") then
			if game.Players:FindFirstChild(playername):FindFirstChild("PlayerGui"):FindFirstChild("chatGui") then
				if game.Players:FindFirstChild(playername):FindFirstChild("PlayerGui"):FindFirstChild("chatGui"):FindFirstChild("Frame") then
					local msg = self.OriginalFrame:Clone()
					msg.Parent = game.Players:FindFirstChild(playername):FindFirstChild("PlayerGui"):FindFirstChild("chatGui"):FindFirstChild("Frame")
					msg.Position=UDim2.new(-1,0,1,sizeX-sizeX*2)
					self.PlayerReplications[playername] = msg
					self:UpdatePos()
				end
			end
		end
	end
end

Class.CheckForDeletion = function(self)
	local shoulddelete = true
	for k,v in pairs(self.PlayerReplications) do
		shoulddelete = false
	end
	return shoulddelete
end

return Class
]]></ProtectedString>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBXE2BA8CB451DC488FB2E3688327B64A00">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Replication</string>
				<ProtectedString name="Source"><![CDATA[--[[
	Use to replicate the GUI to new players.
--]]

-- Scripts --
script.Parent:WaitForChild("StartExec")

GUI=script.chatGui

function insertgui(player)
	if not player.PlayerGui:findFirstChild(GUI.Name) then
		GUI:Clone().Parent=player.PlayerGui
	end
end

local alreadyadded = {}

local players = game.Players:GetChildren()
for i=1, #players do
	table.insert(alreadyadded, players[i])
	players[i].CharacterAdded:connect(function()
		insertgui(players[i])
	end)
	insertgui(players[i])
end

game.Players.PlayerAdded:connect(function(p)
	local added = false
	for i=1, #alreadyadded do
		if alreadyadded[i] == p then
			added = true
		end
	end
	if added == false then
		p.CharacterAdded:connect(function()
			insertgui(p)
		end)
	end
end)]]></ProtectedString>
			</Properties>
			<Item class="ScreenGui" referent="RBX40F8D837F2DF40ACA8013B680AEBC5B6">
				<Properties>
					<string name="Name">chatGui</string>
				</Properties>
				<Item class="Frame" referent="RBXF0C48CBA7EEC4A18B6D5644E6E0F3D80">
					<Properties>
						<bool name="Active">false</bool>
						<Color3 name="BackgroundColor3">4294967295</Color3>
						<float name="BackgroundTransparency">1</float>
						<Color3 name="BorderColor3">4279970357</Color3>
						<int name="BorderSizePixel">1</int>
						<bool name="ClipsDescendants">false</bool>
						<bool name="Draggable">false</bool>
						<string name="Name">Frame</string>
						<Ref name="NextSelectionDown">null</Ref>
						<Ref name="NextSelectionLeft">null</Ref>
						<Ref name="NextSelectionRight">null</Ref>
						<Ref name="NextSelectionUp">null</Ref>
						<UDim2 name="Position">
							<XS>0</XS>
							<XO>5</XO>
							<YS>0</YS>
							<YO>5</YO>
						</UDim2>
						<float name="Rotation">0</float>
						<bool name="Selectable">false</bool>
						<Ref name="SelectionImageObject">null</Ref>
						<UDim2 name="Size">
							<XS>0</XS>
							<XO>500</XO>
							<YS>0</YS>
							<YO>200</YO>
						</UDim2>
						<token name="SizeConstraint">0</token>
						<token name="Style">0</token>
						<bool name="Visible">true</bool>
						<int name="ZIndex">1</int>
					</Properties>
					<Item class="Frame" referent="RBXB729348379B04EF29595D36B73D8DA6A">
						<Properties>
							<bool name="Active">false</bool>
							<Color3 name="BackgroundColor3">4294967295</Color3>
							<float name="BackgroundTransparency">1</float>
							<Color3 name="BorderColor3">4279970357</Color3>
							<int name="BorderSizePixel">1</int>
							<bool name="ClipsDescendants">false</bool>
							<bool name="Draggable">false</bool>
							<string name="Name">chatholder</string>
							<Ref name="NextSelectionDown">null</Ref>
							<Ref name="NextSelectionLeft">null</Ref>
							<Ref name="NextSelectionRight">null</Ref>
							<Ref name="NextSelectionUp">null</Ref>
							<UDim2 name="Position">
								<XS>0.00999999978</XS>
								<XO>0</XO>
								<YS>1</YS>
								<YO>5</YO>
							</UDim2>
							<float name="Rotation">0</float>
							<bool name="Selectable">false</bool>
							<Ref name="SelectionImageObject">null</Ref>
							<UDim2 name="Size">
								<XS>1</XS>
								<XO>0</XO>
								<YS>0</YS>
								<YO>20</YO>
							</UDim2>
							<token name="SizeConstraint">0</token>
							<token name="Style">0</token>
							<bool name="Visible">true</bool>
							<int name="ZIndex">1</int>
						</Properties>
						<Item class="TextLabel" referent="RBXFAD00024B8944AC2BDC6508E46B4C1EC">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4281089616</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4281089616</Color3>
								<int name="BorderSizePixel">3</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">6</token>
								<token name="FontSize">6</token>
								<string name="Name">char</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>1</XS>
									<XO>-100</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>0</XS>
									<XO>70</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">LOADING</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">0.800000012</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">true</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">2</int>
							</Properties>
						</Item>
						<Item class="TextBox" referent="RBX881AB50D0CF94F24B687B6C79F1196BA">
							<Properties>
								<bool name="Active">false</bool>
								<Color3 name="BackgroundColor3">4281089616</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4281089616</Color3>
								<int name="BorderSizePixel">3</int>
								<bool name="ClearTextOnFocus">true</bool>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">5</token>
								<token name="FontSize">6</token>
								<bool name="MultiLine">false</bool>
								<string name="Name">input</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>0</YO>
								</UDim2>
								<float name="Rotation">0</float>
								<bool name="Selectable">true</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>-100</XO>
									<YS>1</YS>
									<YO>0</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<string name="Text">Press &quot;/&quot; or click here to type.</string>
								<Color3 name="TextColor3">4294967295</Color3>
								<bool name="TextScaled">true</bool>
								<Color3 name="TextStrokeColor3">4278190080</Color3>
								<float name="TextStrokeTransparency">1</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">true</bool>
								<token name="TextXAlignment">0</token>
								<token name="TextYAlignment">0</token>
								<bool name="Visible">true</bool>
								<int name="ZIndex">1</int>
							</Properties>
							<Item class="Frame" referent="RBX43C96398BD8541E8BD9BC7D79F6FC5A0">
								<Properties>
									<bool name="Active">false</bool>
									<Color3 name="BackgroundColor3">4279837743</Color3>
									<float name="BackgroundTransparency">0</float>
									<Color3 name="BorderColor3">4279837743</Color3>
									<int name="BorderSizePixel">0</int>
									<bool name="ClipsDescendants">false</bool>
									<bool name="Draggable">false</bool>
									<string name="Name">Frame</string>
									<Ref name="NextSelectionDown">null</Ref>
									<Ref name="NextSelectionLeft">null</Ref>
									<Ref name="NextSelectionRight">null</Ref>
									<Ref name="NextSelectionUp">null</Ref>
									<UDim2 name="Position">
										<XS>0</XS>
										<XO>-2</XO>
										<YS>1</YS>
										<YO>0</YO>
									</UDim2>
									<float name="Rotation">0</float>
									<bool name="Selectable">false</bool>
									<Ref name="SelectionImageObject">null</Ref>
									<UDim2 name="Size">
										<XS>1</XS>
										<XO>75</XO>
										<YS>0</YS>
										<YO>3</YO>
									</UDim2>
									<token name="SizeConstraint">0</token>
									<token name="Style">0</token>
									<bool name="Visible">true</bool>
									<int name="ZIndex">10</int>
								</Properties>
							</Item>
						</Item>
						<Item class="LocalScript" referent="RBX854469CD7BD3466E83BE639046BB8C29">
							<Properties>
								<bool name="Disabled">false</bool>
								<Content name="LinkedSource"><null></null></Content>
								<string name="Name">handle</string>
								<ProtectedString name="Source"><![CDATA[--[[
	This is for the local part of the chat.
	I really dislike using this but haven't been able to get it working in the main script yet.

	Organized this in latest update.

]]
--Generic variables
repeat wait() print'Awaiting server...' until game.Players.LocalPlayer and game.ReplicatedStorage.ProChat
local player = game.Players.LocalPlayer
	local mouse = player:GetMouse()


--more variables
SendBtn=script.Parent.MobileSendBtn
typer = script.Parent.input
maxnumber=150
stockphrase = 'Press "/" or click here to type.'
frame = script.Parent.Parent
UID = game:GetService("UserInputService")

--Remove CoreGUI. 
local StarterGui = game:GetService('StarterGui')
StarterGui:SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false)

--Temporary fix for mobile users
if UID.TouchEnabled==true then
	frame.Size = UDim2.new(0,250,0,200)
	stockphrase='Tap to start typing.'
	typer.Text=stockphrase
	SendBtn.Visible=true
end
	
--Captures focus	
function animate()
	typer.Text = ""
	typer:CaptureFocus()
	for i = 0.5,0,-.1 do
		game:GetService("RunService").RenderStepped:wait()
		typer.TextTransparency=i
		script.Parent.char.TextTransparency=i
	end
end

-- This is for detecting the mention
function detectMention(message)	
	repeat wait() until message:findFirstChild'msg'
	for w in string.gmatch(message.msg.Text, "%a+") do
	    if string.len(w)>1 and string.lower(w)==string.lower(string.sub(player.Name,1,string.len(w))) then
	    	message.msg.TextColor3=Color3.new(255/255, 255/255, 255/255)
			message.msg.TextStrokeColor3 = Color3.new(41/255,128/255,185/255)
			message.msg.TextStrokeTransparency=0
	    end

	end
end

-- To send the message
function send()
	if typer.Text ~= stockphrase and typer.Text ~= "" and typer.Text ~=" " then
		--Good good, let's continue.
		if game.ReplicatedStorage:findFirstChild'ProChat' then
			game.ReplicatedStorage.ProChat.ProChatted:FireServer(string.sub(typer.Text,0,maxnumber))
			typer.Text = stockphrase

		--Animations
			for i = 0,0.5,.1 do
				game:GetService("RunService").RenderStepped:wait() --loveya
				typer.TextTransparency=i
				script.Parent.char.TextTransparency=i
			end

		end		
	end
end

-- Detect keyboard input
UID.InputBegan:connect(function(input)
	if input.KeyCode == Enum.KeyCode.Return then
		send()
		typer.Text = stockphrase
	end

	if input.KeyCode == Enum.KeyCode.Slash then
		if typer.Text==stockphrase then
			animate()
		end
	end
	
	if input.KeyCode == Enum.KeyCode.Escape then
		typer.Text = stockphrase
	end
end)

-- This will fire when the mobile button is clicked.
SendBtn.MouseButton1Click:connect(function()
	send()
end)

--This will fire when a message is added.
script.Parent.Parent.ChildAdded:connect(function(c)
	repeat wait() until c:findFirstChild('name')
	if c:IsA'Frame' and c.Name=="message" and string.lower(c.name.Text)~=string.lower(" "..player.Name..":") then detectMention(c) end
end)


--This is to track the character count of the textbox, ugly because I can't find a proper event.
-- if someone finds a better way to do it, pls do a pull request. 
game.ReplicatedStorage.ProChat.OnGuiSpawn:FireServer()
while wait() do
	local number = string.len(script.Parent.input.Text)
	--Fill the label
	if typer.Text ~= stockphrase and typer.Text ~= "" then
		script.Parent.char.Text = maxnumber-number.." characters left"
	else
		number=0
		script.Parent.char.Text = maxnumber-number.." characters left"
	end
	--Set the color
	if number>(maxnumber-(maxnumber/3)) then
		script.Parent.char.TextColor3=Color3.new(212/255, 19/255, 22/255)
		else
		script.Parent.char.TextColor3=Color3.new(10/255, 151/255, 212/255)
	end
	if string.len(typer.Text) < 40 then
		typer:TweenSize(UDim2.new(1,-100,1,0))
		script.Parent.char:TweenSize(UDim2.new(0,70,1,0))
	else
		typer:TweenSize(UDim2.new(1,-100,1,60))
		script.Parent.char:TweenSize(UDim2.new(0,70,1,60))
	end
	--Set it back to the correct length.
	if number>maxnumber then
		typer.Text = string.sub(typer.Text,0,maxnumber)
	end 
end]]></ProtectedString>
							</Properties>
						</Item>
						<Item class="TextButton" referent="RBXA2819E52063844DF92E8359A2CE23BF1">
							<Properties>
								<bool name="Active">true</bool>
								<bool name="AutoButtonColor">true</bool>
								<Color3 name="BackgroundColor3">4279837743</Color3>
								<float name="BackgroundTransparency">0</float>
								<Color3 name="BorderColor3">4279837743</Color3>
								<int name="BorderSizePixel">3</int>
								<bool name="ClipsDescendants">false</bool>
								<bool name="Draggable">false</bool>
								<token name="Font">5</token>
								<token name="FontSize">7</token>
								<bool name="Modal">false</bool>
								<string name="Name">MobileSendBtn</string>
								<Ref name="NextSelectionDown">null</Ref>
								<Ref name="NextSelectionLeft">null</Ref>
								<Ref name="NextSelectionRight">null</Ref>
								<Ref name="NextSelectionUp">null</Ref>
								<UDim2 name="Position">
									<XS>0</XS>
									<XO>0</XO>
									<YS>1</YS>
									<YO>5</YO>
								</UDim2>
								<float name="Rotation">0</float>
								<bool name="Selectable">false</bool>
								<bool name="Selected">false</bool>
								<Ref name="SelectionImageObject">null</Ref>
								<UDim2 name="Size">
									<XS>1</XS>
									<XO>0</XO>
									<YS>0</YS>
									<YO>20</YO>
								</UDim2>
								<token name="SizeConstraint">0</token>
								<token name="Style">0</token>
								<string name="Text">Tap To Send</string>
								<Color3 name="TextColor3">4293848814</Color3>
								<bool name="TextScaled">false</bool>
								<Color3 name="TextStrokeColor3">4293848814</Color3>
								<float name="TextStrokeTransparency">0.800000012</float>
								<float name="TextTransparency">0</float>
								<bool name="TextWrapped">false</bool>
								<token name="TextXAlignment">2</token>
								<token name="TextYAlignment">1</token>
								<bool name="Visible">false</bool>
								<int name="ZIndex">1</int>
							</Properties>
						</Item>
					</Item>
				</Item>
			</Item>
		</Item>
		<Item class="Script" referent="RBX7A088C8BEECF485E9877D2D2CD1FF8A2">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Introduction</string>
				<ProtectedString name="Source"><![CDATA[--[[
	This is a folder of neccesary files to get ProChat working in your server.
	Don't modify it.
		https://github.com/dylanROBLOX/prochat
		v1.1
	-----------------------------------------------------------------
	|																|
	|					/!\ LICENSE AND AGREEMENT					|
	|		-Only re-release this if you have made changes. 		|
	|		-By editing scripts we won't help fix your issues.		|
	|																|
	-----------------------------------------------------------------
	
	--
	Contributors: 
		-h5s
		-SMS1337
		-YAYZMAN23
		
		Distributed as OlympicPickle. This is the official release.
--]]]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="Script" referent="RBX8F1AB14E2FBE42DCA6ADCB229C4A5E60">
			<Properties>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">AutoUpdate</string>
				<ProtectedString name="Source"><![CDATA[-- needs cleaning

local version = script.Parent:WaitForChild("Version").Value
local modelid = 234218451

local model = game:GetService("InsertService"):LoadAsset(modelid)
model = model:GetChildren()[1]

local function printf(text)
	game:GetService('TestService'):Warn(false, " [ ProChat Auto Update Function ] "..text)
end

local function continue()
	canrun = Instance.new("BoolValue")
	canrun.Name = "StartExec"
	canrun.Parent = script.Parent
end

if model~= nil then -- If it's not trusted, it will nil. 
	if model:WaitForChild("Version").Value > version then
		model:WaitForChild("Settings"):Destroy()
		local realsettings = script.Parent:WaitForChild("Settings"):Clone()
			realsettings.Parent = model

		printf("ProChat just automagically updated to version " .. model:WaitForChild("Version").Value.. ", courtesy of the ProChat contributers")
		printf("Don't worry, all your settings should carry over, you should consider manually updating sometime though")
		printf("If an update added new settings, they will be set to their default values")
		
		model.Parent = script.Parent.Parent
		script.Parent:Destroy()
	else
		print("did not update")
		continue()
	end
else -- If the model is nil
	printf"Auto Update was disabled due to an fatal error."
	continue()
	script.Disabled=true
end]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="ModuleScript" referent="RBX5F7ADFC9577440AE9767DAC41DEA4F00">
			<Properties>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Settings</string>
				<ProtectedString name="Source"><![CDATA[local settings = {}
	settings["nicknameLocked"] = true 										   -- If set to true, nicknames are only for admins.
	settings["feedback"]       = false                                         -- Gives you output spam on everything that happens, good for debugging.
	settings["extraadmins"]    = {"h5s";"olympicpickle";"player1";"yayzman23"} -- people who get admin badge, defaults to contributers
	settings["robloxadmins"]   = true                                          -- Official ROBLOX admins will also get gold text if true.
	settings["activityLog"]    = true										   -- Will say when a player leaves and joins.
return settings
]]></ProtectedString>
			</Properties>
		</Item>
		<Item class="IntValue" referent="RBXE2F581A550E04A2D9D810EBA5E9248E8">
			<Properties>
				<string name="Name">Version</string>
				<int name="Value">6</int>
			</Properties>
		</Item>
	</Item>
</roblox>
